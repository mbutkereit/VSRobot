import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class MoveGripperSkeleton {

	public void handle(String methodName){
		ParameterParser parser = new ParameterParser();
		
  	  JSONObject localJSONObject2 = new JSONObject();
  	  localJSONObject2.put("Type", "Response");
		
	  
	  switch (methodName)
	  {
	  case "closeGripper": 
	    
	    
	    int j = ((Integer)localMap.get(Long.valueOf(0L))).intValue();
	    try
	    {
	      paramSkeletonClientRequest.socket.close();
	      int n = this.skel.getImpl().closeGripper(j);
	    }
	    catch (Exception localException2)
	    {
	      localException2.printStackTrace();
	    }
	    break;
	  case "openGripper": 
		    localMap = Collections.synchronizedMap(new HashMap());
		    int k = ((Integer)localMap.get(Long.valueOf(0L))).intValue();
		    try
		    {
		      int i1 = this.skel.getImpl().openGripper(k);
		    }
		    catch (Exception localException3)
		    {
		      localException3.printStackTrace();
		    }
	    break;
	  case "isGripperClosed": 
	    try
	    {
	      int m = this.skel.getImpl().isGripperClosed();
	      localJSONObject2.put("ReturnValue", "" + m);
	      sendAnswer(paramSkeletonClientRequest.socket, localJSONObject2);
	    }
	    catch (Exception localException1)
	    {
	      localException1.printStackTrace();
	    }
	    break;
	  default: 
	    System.err.println("[ERROR] Function not supported ");
	    System.exit(-1);
	  }
	  return localJSONObject2;
	}
	}
	
	
}
