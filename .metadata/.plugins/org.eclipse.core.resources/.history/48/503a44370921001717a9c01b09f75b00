import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonReader;

import org.cads.ev3.middleware.CaDSEV3RobotStudentImplementation;
import org.cads.ev3.middleware.CaDSEV3RobotType;
import org.cads.ev3.rmi.generated.cadSRMIInterface.IIDLCaDSEV3RMIMoveGripper;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class MoveGripperSkeleton {
	private final static String ServiceClass = "IDLCaDSEV3RMIMoveGripper";

	public void handle(byte[] buffer, int length) {
		ParameterParser parser = new ParameterParser();

		JSONObject response = new JSONObject();
		response.put("Type", "Response");

		try (InputStream is = new ByteArrayInputStream(buffer, 0, length);
				JsonReader rdr = Json.createReader(is)) {

			JsonObject obj = rdr.readObject();

			String className = obj.getString("ObjectName");
			String methodName = obj.getString("FunctionName");

			if (!className.equals(MoveGripperSkeleton.ServiceClass)) {
				response.put("Type", "Response");
				response.put("State", "NOK");
				response.put("Exception", "CaDSRMIClassNotFoundException");
			} else {
				Map<Long,Integer> parameterList = parser.parse(obj);
				int param1 = 0;
				int result = 0;
				switch (methodName) {
				case "closeGripper":
					
					iparam1 = ((Integer)parameterList.get(Long.valueOf(0L))).intValue();
	
						int n = this.getImplementation().closeGripper(param1);
	
					break;
				case "openGripper":
					 param1 = ((Integer)parameterList.get(Long.valueOf(0L))).intValue();
					int n = this.getImplementation().openGripper(param1);
					break;
				case "isGripperClosed":
					try {
						int m = this.skel.getImpl().isGripperClosed();
						localJSONObject2.put("ReturnValue", "" + m);
						sendAnswer(paramSkeletonClientRequest.socket,
								localJSONObject2);
					} catch (Exception localException1) {
						localException1.printStackTrace();
					}
					break;
				default:
					System.err.println("[ERROR] Function not supported ");
					System.exit(-1);

				}
			}
		} catch (Exception e) {

		}

		return response;
	}

	public IIDLCaDSEV3RMIMoveGripper getImplementation() {
		CaDSEV3RobotStudentImplementation robot = CaDSEV3RobotStudentImplementation
				.createInstance(CaDSEV3RobotType.SIMULATION, manager, manager);
		RobotMoveGripperFactory factory = new RobotMoveGripperFactory(robot);

		IIDLCaDSEV3RMIMoveGripper gripper = factory
				.get(MoveGripperSkeleton.ServiceClass);
		return gripper;
	}
	
}
