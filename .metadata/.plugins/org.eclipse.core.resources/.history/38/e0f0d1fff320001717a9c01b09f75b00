import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;


public class MoveGripperSkeleton {
	 private void doRunService()
	    {
	      JSONObject localJSONObject = null;
	          String str = (String)localSkeletonClientRequest.json.get("ObjectName");
	          if (!str.equals("IDLCaDSEV3RMIMoveGripper"))
	          {
	            localJSONObject = new JSONObject();
	            localJSONObject.put("Type", "Response");
	            localJSONObject.put("State", "NOK");
	            localJSONObject.put("Exception", "CaDSRMIClassNotFoundException");
	          }
	          else
	          {
	            localJSONObject = switchFunktions(localSkeletonClientRequest);
	          }
	        }
	      }

private synchronized JSONObject switchFunktions(IDLCaDSEV3RMIMoveGripperSkeleton.SkeletonClientRequest paramSkeletonClientRequest)
{
  JSONObject localJSONObject1 = paramSkeletonClientRequest.json;
  JSONObject localJSONObject2 = new JSONObject();
  localJSONObject2.put("Type", "Response");
  String str1 = (String)localJSONObject1.get("FunctionName");
  Map localMap;
  JSONArray localJSONArray;
  Iterator localIterator;
  String str3;
  int i2;
  switch (str1)
  {
  case "closeGripper": 
    localMap = Collections.synchronizedMap(new HashMap());
    localJSONArray = (JSONArray)localJSONObject1.get("Parameter_For_Function_0");
    localIterator = localJSONArray.iterator();
    while (localIterator.hasNext())
    {
      JSONObject localJSONObject3 = (JSONObject)localIterator.next();
      long l1 = ((Long)localJSONObject3.get("position")).longValue();
      if (l1 < 0L) {
        break;
      }
      str3 = (String)localJSONObject3.get("type");
      i2 = (int)((Long)localJSONObject3.get("value")).longValue();
      switch (str3)
      {
      case "int": 
        localMap.put(Long.valueOf(l1), Integer.valueOf(i2));
        break;
      default: 
        System.out.println("Type not supported ");
        System.exit(-1);
      }
    }
    int j = ((Integer)localMap.get(Long.valueOf(0L))).intValue();
    try
    {
      paramSkeletonClientRequest.socket.close();
      int n = this.skel.getImpl().closeGripper(j);
    }
    catch (Exception localException2)
    {
      localException2.printStackTrace();
    }
    break;
  case "openGripper": 
    localMap = Collections.synchronizedMap(new HashMap());
    localJSONArray = (JSONArray)localJSONObject1.get("Parameter_For_Function_1");
    localIterator = localJSONArray.iterator();
    while (localIterator.hasNext())
    {
      JSONObject localJSONObject4 = (JSONObject)localIterator.next();
      long l2 = ((Long)localJSONObject4.get("position")).longValue();
      if (l2 < 0L) {
        break;
      }
      str3 = (String)localJSONObject4.get("type");
      i2 = (int)((Long)localJSONObject4.get("value")).longValue();
      switch (str3)
      {
      case "int": 
        localMap.put(Long.valueOf(l2), Integer.valueOf(i2));
        break;
      default: 
        System.out.println("Type not supported ");
        System.exit(-1);
      }
    }
    int k = ((Integer)localMap.get(Long.valueOf(0L))).intValue();
    try
    {
      paramSkeletonClientRequest.socket.close();
      int i1 = this.skel.getImpl().openGripper(k);
    }
    catch (Exception localException3)
    {
      localException3.printStackTrace();
    }
    break;
  case "isGripperClosed": 
    localMap = Collections.synchronizedMap(new HashMap());
    localJSONArray = (JSONArray)localJSONObject1.get("Parameter_For_Function_2");
    localIterator = localJSONArray.iterator();
    while (localIterator.hasNext())
    {
      JSONObject localJSONObject5 = (JSONObject)localIterator.next();
      long l3 = ((Long)localJSONObject5.get("position")).longValue();
      if (l3 < 0L) {
        break;
      }
      str3 = (String)localJSONObject5.get("type");
      i2 = (int)((Long)localJSONObject5.get("value")).longValue();
      switch (str3)
      {
      case "int": 
        localMap.put(Long.valueOf(l3), Integer.valueOf(i2));
        break;
      default: 
        System.out.println("Type not supported ");
        System.exit(-1);
      }
    }
    try
    {
      int m = this.skel.getImpl().isGripperClosed();
      localJSONObject2.put("ReturnValue", "" + m);
      sendAnswer(paramSkeletonClientRequest.socket, localJSONObject2);
    }
    catch (Exception localException1)
    {
      localException1.printStackTrace();
    }
    break;
  default: 
    System.err.println("[ERROR] Function not supported ");
    System.exit(-1);
  }
  return localJSONObject2;
}
}
}
