package provider;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.Map;

import javax.json.Json;
import javax.json.JsonObject;
import javax.json.JsonObjectBuilder;
import javax.json.JsonReader;

import utilities.ParameterParser;

/**
 * Die Klasse ist verantwortlich f√ºr das Unmarshalling.
 * 
 * @author wilhelm
 *
 */
public class %s implements InterfaceSkeleton {

	public final static String ServiceClass = "%s";
	
	
	
	private %s imp;

	/**
	 * Konstruktor
	 * 
	 */
	public %s(%s imp) {
		this.imp = imp;
	}


	public JsonObject handle(byte[] buffer, int length) {
		ParameterParser parser = new ParameterParser();

		JsonObjectBuilder response = Json.createObjectBuilder();
		response.add("Type", "Response");

		try (InputStream is = new ByteArrayInputStream(buffer, 0, length);
				JsonReader rdr = Json.createReader(is)) {

			JsonObject obj = rdr.readObject();
			String className = obj.getString("ObjectName");
			String methodName = obj.getString("FunctionName");

			if (!(className.equals(%s.ServiceClass))) {
				throw new Exception("Class not found.");
			} else {
				
				Map<Long, Object> parameterList = parser.parse(obj);
				
				switch (methodName) {
				  %s
				default:
					throw new Exception("[ERROR] Function not supported ");

				}
			}
		} catch (Exception e) {
			response.add("Type", "Response");
			response.add("Exception", "ClassNotFoundException");
		}

		return response.build();
	}
	
}